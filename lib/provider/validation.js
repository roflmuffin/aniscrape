// Generated by CoffeeScript 1.10.0
(function() {
  var Errors, Helpers, Logic, Methods, Promise, _, needle;

  Promise = require('bluebird');

  needle = Promise.promisifyAll(require('needle'));

  Errors = require('../errors');

  _ = require('lodash');

  Methods = {
    Search: {
      Page: {
        string: function(str, query) {
          return needle.getAsync(str.page).get('body');
        },
        object: function(obj, query) {
          var param, requestType;
          requestType = obj.type || 'get';
          param = {};
          param[obj.param] = query;
          return needle.requestAsync(requestType, obj.url, param).get('body');
        }
      },
      SearchResult: {
        string: function(str, $, body) {
          return $(str);
        }
      }
    },
    Series: {
      List: {
        string: function(str, $, body) {
          return $(str);
        }
      }
    }
  };

  Helpers = {
    BindFunction: function(methods, param) {
      var bound;
      if (typeof param === 'function') {
        bound = param;
      } else {
        bound = _.partial(methods[typeof param], param);
      }
      return Promise.method(bound);
    }
  };

  Logic = {
    ValidateProvider: function(provider) {
      provider.methods = {};
      if ((provider.name == null) || provider.name === '') {
        throw new Errors.SearchProviderFormatError(provider, 'No name specified for provider');
      }
      if ((provider.search == null) || provider.search === null) {
        throw new Errors.SearchProviderFormatError(provider, 'No search function/string specified.');
      }
      if ((provider.search.page == null) || (provider.search.list == null) || (provider.search.row == null)) {
        throw new Errors.SearchProviderFormatError(provider, 'No search selectors specified.');
      }
      if ((provider.search.row.name == null) || (provider.search.row.url == null)) {
        throw new Errors.SearchProviderFormatError(provider, "Search selectors must expose 'name' and 'url' as properties");
      }
      if ((provider.series.list == null) || (provider.series.row == null)) {
        throw new Errors.SearchProviderFormatError(provider, 'No series selectors specified.');
      }
      if ((provider.series.row.name == null) || (provider.series.row.url == null)) {
        throw new Errors.SearchProviderFormatError(provider, "Series selectors must expose 'name' and 'url' as properties");
      }
      if ((provider.episode == null) || typeof provider.episode !== 'function') {
        throw new Errors.SearchProviderFormatError(provider, "Provider must expose 'episode' function to parse video URLs");
      }
      provider.methods.search = Helpers.BindFunction(Methods.Search.Page, provider.search.page);
      provider.methods.list = Helpers.BindFunction(Methods.Search.SearchResult, provider.search.list);
      provider.methods.seriesList = Helpers.BindFunction(Methods.Series.List, provider.series.list);
      return true;
    }
  };

  module.exports = {
    Helpers: Helpers,
    Logic: Logic
  };

}).call(this);
